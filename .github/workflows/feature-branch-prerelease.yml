name: Prerelease feature branch

on:
  workflow_dispatch:
    inputs:
      releaseType:
        type: choice
        description: Select dry-run for testing before real prerelease
        required: true
        options:
          - dry-run
          - prerelease
        

jobs:
  check-npm-token:
    name: Check NPM Token
    runs-on: ubuntu-latest
    steps:
      - name: Check NPM token validity
        run: |
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.NPM_PUBLISH_TOKEN }}" https://registry.npmjs.org/-/whoami)
          USERNAME=$(echo "$RESPONSE" | jq -r '.username')
          if [ "$USERNAME" != "sdk.dev" ]; then
            echo "❌ NPM token validation failed!"
            echo "Expected username: sdk.dev"
            echo "Got username: $USERNAME"
            echo "Full response: $RESPONSE"
            echo ""
            echo "The token may have expired or been revoked."
            echo "📖 Token rotation guide: https://amplitude.atlassian.net/wiki/spaces/DBS/pages/3425271816/Migration+plan+Trusted+publisher+OIDC#Granular-access-token"
            exit 1
          fi
          echo "✅ NPM token is valid (username: $USERNAME)"

  authorize:
    name: Authorize
    runs-on: ubuntu-latest
    needs: [check-npm-token]
    steps:
      - name: ${{ github.actor }} permission check to do a release
        uses: 'lannonbr/repo-permission-check-action@2.0.2'
        with:
          permission: 'write'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [authorize]
    permissions:
      id-token: write
      contents: write
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-name@v7

      - name: Check out git repository
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.branch-name.outputs.ref_branch }}
          fetch-depth: 0

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install project dependencies
        run: |
          yarn install --frozen-lockfile

      - name: Build all packages
        run: |
          yarn build

      - name: Test all packages
        run: |
          yarn test

      - name: Lint all packages
        run: |
          yarn lint

      - name: Configure Git User
        run: |
          git config --global user.name amplitude-sdk-bot
          git config --global user.email amplitude-sdk-bot@users.noreply.github.com

      - name: Configure NPM User
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_PUBLISH_TOKEN }}" > ~/.npmrc
          npm whoami

      # Keep alphanumeric characters and hyphens, remove other invalid characters
      # Examples:
      #   - SR-1858 -> SR-1858
      #   - feature/my-branch -> featuremy-branch
      #   - fix_bug_123 -> fixbug123
      #   - user@company.com -> usercompanycom
      - name: Transform feature branch name
        run: |
          echo "PREID=$(echo '${{ steps.branch-name.outputs.current_branch }}' | tr -cd '[:alnum:]-')" >> $GITHUB_ENV

      # Use --no-push to prevent pushing to remote
      # Version example: 1.0.0 -> 1.1.0-{preid}.0
      - name: Dry run pre-release version
        if: ${{ github.event.inputs.releaseType == 'dry-run' }}
        run: |
          GH_TOKEN=${{ secrets.GH_PUBLISH_TOKEN }} npm run deploy:version -- -y --no-private --conventional-prerelease --preid ${{ env.PREID }} --allow-branch ${{ steps.branch-name.outputs.current_branch }} --no-changelog --no-push

      - name: Pre-release version
        if: ${{ github.event.inputs.releaseType == 'prerelease' }}
        run: |
          GH_TOKEN=${{ secrets.GH_PUBLISH_TOKEN }} npm run deploy:version -- -y --no-private --conventional-prerelease --preid ${{ env.PREID }} --allow-branch ${{ steps.branch-name.outputs.current_branch }} --create-release github

      # Use 'from git' option if `lerna version` has already been run
      - name: Publish Release to NPM
        if: ${{ github.event.inputs.releaseType == 'prerelease' }}
        run: |
          GH_TOKEN=${{ secrets.GH_PUBLISH_TOKEN }} npm run deploy:publish -- from-git -y --ignore-scripts --pre-dist-tag ${{ env.PREID }}

