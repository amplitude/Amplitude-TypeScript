name: Publish Single Package

on:
  workflow_dispatch:
    inputs:
      packageName:
        type: string
        description: 'Package name (e.g., unified, analytics-browser)'
        required: true
      releaseTag:
        type: choice
        description: 'Release tag'
        required: true
        options:
          - beta
          - alpha
      dryRun:
        type: boolean
        description: 'Dry run (skip changelog update and npm publish)'
        required: true
        default: true

jobs:
  authorize:
    name: Authorize
    runs-on: ubuntu-latest
    steps:
      - name: ${{ github.actor }} permission check to do a release
        uses: 'lannonbr/repo-permission-check-action@2.0.2'
        with:
          permission: 'write'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-package:
    name: Publish Package
    runs-on: ubuntu-latest
    needs: [authorize]
    permissions:
      id-token: write
      contents: write
    env:
      PACKAGE_NAME: ${{ github.event.inputs.packageName }}
      RELEASE_TAG: ${{ github.event.inputs.releaseTag }}
      DRY_RUN: ${{ github.event.inputs.dryRun }}
      PACKAGE_PATH: packages/${{ github.event.inputs.packageName }}
    strategy:
      matrix:
        node-version: [18.17.x]

    steps:
      - name: Check out git repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Verify package exists
        run: |
          if [ ! -d "$PACKAGE_PATH" ]; then
            echo "❌ Package directory $PACKAGE_PATH does not exist"
            exit 1
          fi
          if [ ! -f "$PACKAGE_PATH/package.json" ]; then
            echo "❌ package.json not found in $PACKAGE_PATH"
            exit 1
          fi
          echo "✅ Package $PACKAGE_NAME found at $PACKAGE_PATH"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install project dependencies
        run: |
          yarn install --frozen-lockfile

      - name: Configure Git User
        run: |
          git config --global user.name amplitude-sdk-bot
          git config --global user.email amplitude-sdk-bot@users.noreply.github.com

      - name: Calculate and update version
        run: |
          cd $PACKAGE_PATH
          # Get current version - use node to extract just the version value
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Simply increment the last digit of the version
          # Extract the last digit and increment it
          LAST_DIGIT=$(echo "$CURRENT_VERSION" | grep -o '[0-9][0-9]*$')
          NEW_LAST_DIGIT=$((LAST_DIGIT + 1))
          
          # Replace the last digit with the incremented value
          NEW_VERSION=$(echo "$CURRENT_VERSION" | sed "s/[0-9][0-9]*$/$NEW_LAST_DIGIT/")
          
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "✅ New version would be: $CURRENT_VERSION → $NEW_VERSION"
          
          # Update version in package.json immediately (needed for build)
          npm pkg set version="$NEW_VERSION"
          
          # Update version in src/version.ts - this file must exist
          if [ -f "src/version.ts" ]; then
            echo "Updating src/version.ts with new version"
            echo "// Autogenerated by \`yarn version-file\`. DO NOT EDIT" > src/version.ts
            echo "export const VERSION = '$NEW_VERSION';" >> src/version.ts
            echo "✅ Updated src/version.ts to version $NEW_VERSION"
          else
            echo "❌ ERROR: src/version.ts not found in $PACKAGE_NAME package"
            echo "This file is required for version management. Please ensure the package has the correct structure."
            exit 1
          fi

      - name: Dry run summary and exit
        if: ${{ env.DRY_RUN == 'true' }}
        run: |
          cd $PACKAGE_PATH
          echo "🔍 DRY RUN SUMMARY:"
          echo "Package: $PACKAGE_NAME"
          echo "Current version: $CURRENT_VERSION"
          echo "New version would be: $NEW_VERSION"
          echo "Release tag: $RELEASE_TAG"
          echo "Would publish: $PACKAGE_NAME@$NEW_VERSION with tag $RELEASE_TAG"
          echo "✅ Dry run completed successfully - exiting without making changes"
          exit 0

      - name: Build package
        run: |
          yarn build

      - name: Test package
        run: |
          yarn test

      - name: Lint package
        run: |
          yarn lint

      - name: Configure NPM User
        if: ${{ env.DRY_RUN == 'false' }}
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_PUBLISH_TOKEN }}" > ~/.npmrc
          npm whoami

      - name: Make package public for publishing
        if: ${{ env.DRY_RUN == 'false' }}
        run: |
          cd $PACKAGE_PATH
          # Backup original package.json
          cp package.json package.json.backup
          
          echo "Making package public for publishing"
          
          # Set private to false (version already updated)
          npm pkg set private=false --json
          
          echo "✅ Made package public for publishing"
          echo "Current package.json settings:"
          cat package.json | grep -E '"(version|private)"'

      - name: Update changelog and publish
        if: ${{ env.DRY_RUN == 'false' }}
        run: |
          cd $PACKAGE_PATH
          
          # Generate changelog entry
          echo "Updating changelog for version $NEW_VERSION"
          
          # Check if CHANGELOG.md exists
          if [ ! -f "CHANGELOG.md" ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          # Add new version entry to changelog
          TEMP_FILE=$(mktemp)
          echo "# Changelog" > $TEMP_FILE
          echo "" >> $TEMP_FILE
          echo "## $NEW_VERSION ($(date +%Y-%m-%d))" >> $TEMP_FILE
          echo "" >> $TEMP_FILE
          echo "- Release $NEW_VERSION" >> $TEMP_FILE
          echo "" >> $TEMP_FILE
          
          # Append existing changelog content (skip the first "# Changelog" line)
          if [ -f "CHANGELOG.md" ]; then
            tail -n +2 CHANGELOG.md >> $TEMP_FILE
          fi
          
          mv $TEMP_FILE CHANGELOG.md
          echo "✅ Updated CHANGELOG.md"
          
          # Publish to npm
          echo "Publishing $PACKAGE_NAME@$NEW_VERSION with tag $RELEASE_TAG"
          npm publish --tag $RELEASE_TAG --access=public
          echo "✅ Published $PACKAGE_NAME@$NEW_VERSION to npm with tag $RELEASE_TAG"

      - name: Restore package to private and commit changes
        if: ${{ env.DRY_RUN == 'false' && always() }}
        run: |
          cd $PACKAGE_PATH
          if [ -f "package.json.backup" ]; then
            mv package.json.backup package.json
            echo "✅ Restored package.json to original state (private: true)"
          else
            # Fallback: manually set private back to true
            npm pkg set private=true --json
            echo "✅ Set package back to private"
          fi
          
          # Update version in the restored package.json (but keep private: true)
          npm pkg set version="$NEW_VERSION"
          
          # Now commit the changes with the correct private setting
          echo "Committing version and changelog changes"
          git status
          git add package.json CHANGELOG.md src/version.ts
          git commit -m "chore(release): publish @amplitude/$PACKAGE_NAME@$NEW_VERSION"
          git tag "@amplitude/$PACKAGE_NAME@$NEW_VERSION"
          echo "✅ Committed changes and created tag"

      - name: Push changes
        if: ${{ env.DRY_RUN == 'false' }}
        run: |
          # Get current branch name and push to it
          CURRENT_BRANCH=$(git branch --show-current)
          echo "Pushing to current branch: $CURRENT_BRANCH"
          git push origin "$CURRENT_BRANCH"
          git push origin "@amplitude/$PACKAGE_NAME@$NEW_VERSION"
          echo "✅ Pushed changes and tags to repository" 