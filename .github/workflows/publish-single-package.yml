# This workflow is for publishing NEW packages that are currently private
# It's separate from the main publish-v2.yml workflow which handles stable releases
# Use this workflow for new packages that will only have beta/alpha versions
# The 'latest' tag will always point to the most recent version (even if beta/alpha)
# since these packages don't have stable releases yet
# 
# IMPORTANT: Once a stable (non-beta/alpha) version is published to latest,
# this workflow will prevent further beta/alpha publishing to maintain stability
name: Publish New Package (Beta/Alpha with Latest Tag)

on:
  workflow_dispatch:
    inputs:
      packageName:
        type: string
        description: 'Package name (e.g., unified, analytics-browser) - must be a valid package in packages/ directory'
        required: true
      releaseTag:
        type: choice
        description: 'Release type - choose beta for testing releases or alpha for experimental releases (package will be published with latest tag, but only if no stable version exists)'
        required: true
        options:
          - beta
          - alpha
      dryRun:
        type: boolean
        description: 'Dry run (skip changelog update and npm publish) - recommended to test first'
        required: true
        default: true

jobs:
  # Authorization step - ensures only users with write permissions can trigger this workflow
  authorize:
    name: Authorize
    runs-on: ubuntu-latest
    steps:
      - name: ${{ github.actor }} permission check to do a release
        uses: 'lannonbr/repo-permission-check-action@2.0.2'
        with:
          permission: 'write'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Main publishing job - handles the actual package publishing process
  # This workflow is specifically for NEW packages that are currently private
  # It publishes beta/alpha versions but always uses 'latest' tag for the most recent version
  # since these packages don't have stable releases yet
  publish-package:
    name: Publish New Package (Beta/Alpha with Latest Tag)
    runs-on: ubuntu-latest
    needs: [authorize]
    permissions:
      id-token: write
      contents: write
    env:
      PACKAGE_NAME: ${{ github.event.inputs.packageName }}
      RELEASE_TAG: ${{ github.event.inputs.releaseTag }}
      DRY_RUN: ${{ github.event.inputs.dryRun }}
      PACKAGE_PATH: packages/${{ github.event.inputs.packageName }}
    strategy:
      matrix:
        node-version: [18.17.x]

    steps:
      # Checkout the repository with full history for version management
      - name: Check out git repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Verify the specified package exists and has the required structure
      - name: Verify package exists
        run: |
          if [ ! -d "$PACKAGE_PATH" ]; then
            echo "❌ Package directory $PACKAGE_PATH does not exist"
            exit 1
          fi
          if [ ! -f "$PACKAGE_PATH/package.json" ]; then
            echo "❌ package.json not found in $PACKAGE_PATH"
            exit 1
          fi
          echo "✅ Package $PACKAGE_NAME found at $PACKAGE_PATH"

      # Check if latest published version is stable to prevent beta/alpha publishing
      - name: Validate version publishing rules
        run: |
          echo "🔍 Checking if package can publish beta/alpha versions..."
          
          # Get the package name from package.json
          PACKAGE_JSON_NAME=$(node -p "require('$PACKAGE_PATH/package.json').name")
          echo "Package name: $PACKAGE_JSON_NAME"
          
          # Check if package exists on npm and get latest version
          if npm view "$PACKAGE_JSON_NAME" version 2>/dev/null; then
            LATEST_VERSION=$(npm view "$PACKAGE_JSON_NAME" version 2>/dev/null)
            echo "Latest published version: $LATEST_VERSION"
            
            # Check if latest version is stable (doesn't contain beta or alpha)
            if [[ "$LATEST_VERSION" == *"beta"* ]] || [[ "$LATEST_VERSION" == *"alpha"* ]]; then
              echo "✅ Latest version ($LATEST_VERSION) is pre-release, can publish beta/alpha"
            else
              echo "❌ ERROR: Latest version ($LATEST_VERSION) is stable (non-beta/alpha)"
              echo "Once a stable version is published to latest, you cannot publish beta/alpha versions anymore."
              echo "This prevents version regression and maintains package stability."
              echo ""
              echo "If you need to publish a new stable version, use the main publish workflow instead."
              echo "If this is a new package, ensure the first version is beta/alpha."
              exit 1
            fi
          else
            echo "✅ Package not found on npm, this appears to be a new package"
            echo "New packages can publish beta/alpha versions with latest tag"
          fi

      # Cache node_modules for faster builds
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      # Setup Node.js environment
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      # Install all project dependencies
      - name: Install project dependencies
        run: |
          yarn install --frozen-lockfile

      # Configure Git for automated commits
      - name: Configure Git User
        run: |
          git config --global user.name amplitude-sdk-bot
          git config --global user.email amplitude-sdk-bot@users.noreply.github.com

      # Calculate new version and update package files
      # This increments the patch version for beta/alpha releases
      # For new packages, this will be the first version (e.g., 1.0.0-beta.1)
      # The 'latest' tag will always point to the most recent version
      - name: Calculate and update version
        run: |
          cd $PACKAGE_PATH
          # Get current version - use node to extract just the version value
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Simply increment the last digit of the version
          # Extract the last digit and increment it
          LAST_DIGIT=$(echo "$CURRENT_VERSION" | grep -o '[0-9][0-9]*$')
          NEW_LAST_DIGIT=$((LAST_DIGIT + 1))
          
          # Replace the last digit with the incremented value
          NEW_VERSION=$(echo "$CURRENT_VERSION" | sed "s/[0-9][0-9]*$/$NEW_LAST_DIGIT/")
          
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "✅ New version would be: $CURRENT_VERSION → $NEW_VERSION"
          
          # Update version in package.json immediately (needed for build)
          npm pkg set version="$NEW_VERSION"
          
          # Update version in src/version.ts - this file must exist
          if [ -f "src/version.ts" ]; then
            echo "Updating src/version.ts with new version"
            echo "// Autogenerated by \`yarn version-file\`. DO NOT EDIT" > src/version.ts
            echo "export const VERSION = '$NEW_VERSION';" >> src/version.ts
            echo "✅ Updated src/version.ts to version $NEW_VERSION"
          else
            echo "❌ ERROR: src/version.ts not found in $PACKAGE_NAME package"
            echo "This file is required for version management. Please ensure the package has the correct structure."
            exit 1
          fi

      # Dry run mode - shows what would be published without actually doing it
      # This is the default mode to prevent accidental publishes
      - name: Dry run summary and exit
        if: ${{ env.DRY_RUN == 'true' }}
        run: |
          cd $PACKAGE_PATH
          echo "🔍 DRY RUN SUMMARY:"
          echo "Package: $PACKAGE_NAME"
          echo "Current version: $CURRENT_VERSION"
          echo "New version would be: $NEW_VERSION"
          echo "Release tag: latest (always latest for new packages)"
          echo "Would publish: $PACKAGE_NAME@$NEW_VERSION with tag latest"
          echo "✅ Dry run completed successfully - exiting without making changes"
          exit 0

      # Build the package to ensure it compiles correctly
      - name: Build package
        run: |
          yarn build

      # Run tests to ensure package quality
      - name: Test package
        run: |
          yarn test

      # Lint the code to ensure code quality standards
      - name: Lint package
        run: |
          yarn lint

      # Configure NPM authentication for publishing
      - name: Configure NPM User
        if: ${{ env.DRY_RUN == 'false' }}
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_PUBLISH_TOKEN }}" > ~/.npmrc
          npm whoami

      # Temporarily make package public for publishing (will be restored to private later)
      - name: Make package public for publishing
        if: ${{ env.DRY_RUN == 'false' }}
        run: |
          cd $PACKAGE_PATH
          echo "Making package public for publishing"
          
          # Set private to false (version already updated)
          npm pkg set private=false --json
          
          echo "✅ Made package public for publishing"
          echo "Current package.json settings:"
          cat package.json | grep -E '"(version|private)"'

      - name: Update changelog and publish
        if: ${{ env.DRY_RUN == 'false' }}
        run: |
          cd $PACKAGE_PATH
          
          # Generate changelog entry
          echo "Updating changelog for version $NEW_VERSION"
          
          # Check if CHANGELOG.md exists
          if [ ! -f "CHANGELOG.md" ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          # Add new version entry to changelog
          TEMP_FILE=$(mktemp)
          echo "# Changelog" > $TEMP_FILE
          echo "" >> $TEMP_FILE
          echo "## $NEW_VERSION ($(date +%Y-%m-%d))" >> $TEMP_FILE
          echo "" >> $TEMP_FILE
          echo "- Release $NEW_VERSION" >> $TEMP_FILE
          echo "" >> $TEMP_FILE
          
          # Append existing changelog content (skip the first "# Changelog" line)
          if [ -f "CHANGELOG.md" ]; then
            tail -n +2 CHANGELOG.md >> $TEMP_FILE
          fi
          
          mv $TEMP_FILE CHANGELOG.md
          echo "✅ Updated CHANGELOG.md"
          
          # Publish to npm with latest tag (always latest for new packages)
          echo "Publishing $PACKAGE_NAME@$NEW_VERSION with tag latest"
          npm publish --tag latest --access=public
          echo "✅ Published $PACKAGE_NAME@$NEW_VERSION to npm with tag latest"

      # Restore package to private and commit all changes
      # This ensures the package remains private in the repository after publishing
      - name: Restore package to private and commit changes
        if: ${{ env.DRY_RUN == 'false' && always() }}
        run: |
          cd $PACKAGE_PATH
          npm pkg set private=true --json
          echo "✅ Set package back to private"
          
          # Update version in the restored package.json (but keep private: true)
          npm pkg set version="$NEW_VERSION"
          
          # Now commit the changes with the correct private setting
          echo "Committing version and changelog changes"
          git status
          git add package.json CHANGELOG.md src/version.ts
          git commit -m "chore(release): publish @amplitude/$PACKAGE_NAME@$NEW_VERSION"
          git tag "@amplitude/$PACKAGE_NAME@$NEW_VERSION"
          echo "✅ Committed changes and created tag"

      # Push all changes and tags back to the repository
      - name: Push changes
        if: ${{ env.DRY_RUN == 'false' }}
        run: |
          # Get current branch name and push to it
          CURRENT_BRANCH=$(git branch --show-current)
          echo "Pushing to current branch: $CURRENT_BRANCH"
          git push origin "$CURRENT_BRANCH"
          git push origin "@amplitude/$PACKAGE_NAME@$NEW_VERSION"
          echo "✅ Pushed changes and tags to repository" 