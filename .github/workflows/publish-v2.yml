name: Publish v2.x

on:
  workflow_dispatch:
    inputs:
      publishFrom:
        type: string
        description: Publish source (leave empty for from-git, or enter "from-package")
        required: false

jobs:
  authorize:
    name: Authorize
    runs-on: ubuntu-latest
    steps:
      - name: ${{ github.actor }} permission check to do a release
        uses: 'lannonbr/repo-permission-check-action@2.0.2'
        with:
          permission: 'write'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [authorize]
    permissions:
      id-token: write
      contents: write
    strategy:
      matrix:
        node-version: [18.17.x]

    steps:
      - name: Check out git repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install project dependencies
        run: |
          yarn install --frozen-lockfile

      - name: Build all packages
        run: |
          yarn build

      - name: Test all packages
        run: |
          yarn test

      - name: Lint all packages
        run: |
          yarn lint

      - name: Configure Git User
        run: |
          git config --global user.name amplitude-sdk-bot
          git config --global user.email amplitude-sdk-bot@users.noreply.github.com

      - name: Configure NPM User
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_PUBLISH_TOKEN }}" > ~/.npmrc
          npm whoami

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::358203115967:role/github-actions-role
          aws-region: us-west-2

      # Only create release version when using from-git (default behavior)
      # from-package mode uses existing package.json versions and doesn't need git tags
      - name: Create release version
        if: github.event.inputs.publishFrom != 'from-package'
        run: |
          echo "Running lerna version..."
          OUTPUT=$(GH_TOKEN=${{ secrets.GH_PUBLISH_TOKEN }} npm run deploy:version -- -y --no-private --create-release github 2>&1)
          echo "$OUTPUT"
          
          # Check if the output indicates no changed packages
          if echo "$OUTPUT" | grep -q "No changed packages to version"; then
            echo "❌ No changed packages found to version. Failing the job."
            exit 1
          fi
          
          echo "✅ Successfully created release version"

      # Publish to NPM using from-git or from-package:
      # - from-git: Publishes packages tagged by 'lerna version' in the current commit (requires prior versioning)
      # - from-package: Compares package.json versions with NPM registry, publishes any versions not present in registry
      # See: https://lerna.js.org/docs/features/version-and-publish#from-package
      - name: Publish Release to NPM
        run: |
          GH_TOKEN=${{ secrets.GH_PUBLISH_TOKEN }} npm run deploy:publish -- ${{ github.event.inputs.publishFrom == 'from-package' && 'from-package' || 'from-git' }} -y --pre-dist-tag beta
        env:
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
